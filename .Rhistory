list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% dcast(org, value.var = "NGO")
View(list_org)
library(reshape2)
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(org, value.var = "NGO")
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(value.var = "NGO")
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(Date~org, value.var = "NGO")
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(Date~org, value.var = "org")
View(list_org)
View(list_org)
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(Date~org)
View(list_org)
rm(list_org)
### Table with list of partners by month
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape2::dcast(Date~org)
View(list_org)
### Table with list of partners by month
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org") %>% reshape2::dcast(Date~org, value.var = "name_ngo")
list_org <- org_JMMI %>% select("Date", "org") %>% reshape2::dcast(Date~org, value.var = "ngo_name")
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org, value.var = "ngo_name")
View(list_org)
View(org_JMMI)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(org+Date, value.var = "ngo_name")
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(org+Date, value.var = "ngo_name")
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(~org+Date, value.var = "ngo_name")
rm(list_org)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(org~ngo_name + Date, value.var = "ngo_name")
View(list_org)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org+ngo_name, value.var = "ngo_name")
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org+ngo_name)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org, value.var = "ngo_name")
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~ngo_name)
View(list_org)
list_org <- org_JMMI %>% select("Date", "org") %>% reshape2::dcast(Date~org)
View(list_org)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% reshape2::dcast(Date~org, value.var = "org")
list_org <- org_JMMI %>% select("Date", "org") %>% reshape(timevar = "Date", idvar = "org", "wide")
list_org <- org_JMMI %>% select("Date", "org") %>% reshape(timevar = "Date", idvar = "org", direction = "wide")
View(list_org)
list_org <- org_JMMI %>% select("Date", "org") %>% reshape(timevar = "Date", idvar = "org", direction = "long")
### Table with list of partners by month
org_JMMI$ngo_name <- "ngo_name"
?list_org
rm(list_org)
?reshape
list_org <- org_JMMI %>% select("Date", "org") %>% reshape(timevar = "Date", idvar = c("Date", "org"), direction = "wide")
View(list_org)
rm(list_org)
list_org <- org_JMMI %>% select("Date", "org") %>% unque() %>% reshape(timevar = "Date", idvar = c("Date", "org"), direction = "wide")
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% reshape(timevar = "Date", idvar = c("Date", "org"), direction = "wide")
View(list_org)
list_org <- org_JMMI %>% select("Date", "org") %>% unique()
View(list_org)
?melt
?dcast
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% dcast(Date+org)
View(list_org)
list_org <- org_JMMI %>% select("Date", "org") %>% unique() %>% dcast(Date~org)
View(list_org)
## JMMI Partners Tracker
## Yemen Data Team - 08-03-2020
## V1
rm(list=ls())
library(stringr)
library(zoo)
library(openxlsx)
library(data.table)
library(dplyr)
library(magrittr)
library(tidyverse)
library(formattable)
library(reshape2)
##############
# Cleaning and Wrangling
##############
# For the server
setwd("./Raw Data/")
# Get a list of all files in that folder
list_all<-(list.files())
# Build a list to populate with the csv
list_pull<-list()
# Build a data tibble to populate with a select of the variables
org_JMMI<-as_tibble(data.frame(test="TEST"))
# Put all the csvs into one file together and work from there
# https://stackoverflow.com/questions/5758084/loop-in-r-to-read-many-files
for (k in 1:length(list_all)){
list_pull[[k]] <- read.csv(list_all[k])
# Make the JMMI label in the datasets for disaggregation later
name <-gsub(".csv","",unlist(strsplit(list_all[[k]]," "))[2])
list_pull[[k]]<-mutate(as_tibble(list_pull[[k]]), JMMI= name)
# Change from the _Alls to the nones from before, it should hold in the future.
# Occured during the tool combine
ifelse("select_one_organization_name_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], select_one_organisation_name = select_one_organization_name_All),
NA)
ifelse("governorate_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], governorate_ID = governorate_ID_All),
NA)
ifelse("district_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], district_ID = district_ID_All),
NA)
}
# Function to pull out names of orgs and districts and jmmi
column_pull_org<-function(data){
colnames(data)<-gsub("_ALL", "", colnames(data))
df<-data%>%
dplyr::select("JMMI", ends_with("_ID", ignore.case = F),starts_with("select_one_"))
org_JMMI<<-as_tibble(merge(df,org_JMMI,all=T))
}
# Use lapply to run the function we just made over our cleaned data in the list
lapply(list_pull, column_pull_org)
# Add the Pcodes
# Substitute out the pcodes to standardize the name (taken from JMMI scripting, with csv (utf-8) sheet)
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
source("./other scripts/add_pcodes.R")
org_JMMI<-add.pcodes(org_JMMI)
# Order and delete columns
org_JMMI<-org_JMMI[,c("JMMI","district_ID","governorate_ID","select_one_organisation_name","district_name","governorate_name")]
org_JMMI<-dplyr::rename((org_JMMI), org = select_one_organisation_name)
# Make the JMMI a date that we can sort and work with later
org_JMMI$JMMI<-gsub("_"," ",org_JMMI$JMMI)
org_JMMI$Date<-(as.Date(as.yearmon(org_JMMI$JMMI), format="%b-%Y"))
#org_JMMI$Date<-as.Date(org_JMMI$JMMI, format)
# Ad variables for aggregation
org_JMMI$org_num <- 1
###############
#Analysis
###############
#https://stackoverflow.com/questions/50953598/r-group-by-count-distinct-values-grouping-by-another-column
#What are the splits North and South indicate here
North<-c("YE14", #Al Bayda
"YE27", #Al Mahwit
"YE29", #Amran
"YE20", #Dhamar
"YE17", #Hajjah
"YE11", #Ibb
"YE31", #Raymah
"YE22", #Sa'ada
"YE23", #Sana'a
"YE13"  #Sana'a City
)
North <- data.frame(North = North)
South<-c("YE12", #Abyan
"YE24", #Aden
"YE28", #Al Maharah
"YE19", #Hadramaut
"YE25", #Lahj
"YE21", #Shabwah
"YE32"  #Socotra
)
South <- data.frame(South = South)
Contested<-c("YE30", #Al Dhale'e
"YE18", #Al Hudaydah
"YE16", #Al Jawf
"YE26", #Marib
"YE15"  #Taizz
)
Contested <- data.frame(Contested = Contested)
# Basic Counts
# dt <- org_JMMI %>%
# group_by(Date, org) %>%
# dplyr::summarise(total_obs=dplyr::n(),dist_visited=dplyr::n_distinct(district_ID), gov_visisted=dplyr::n_distinct(governorate_ID))
# Aggregation by district (to then filter by geographic area)
#dt_gov <- org_JMMI %>% group_by(JMMI, governorate_ID) %>%
#  dplyr::summarise(total_obs = dplyr::n(), dist_visited = n_distinct(district_ID), num_partners = n_distinct(org))
# Add geographic ares as a column for filtering
org_JMMI$geo <- ifelse(org_JMMI$governorate_ID %in% North$North, "North",
ifelse(org_JMMI$governorate_ID %in% South$South, "South",
ifelse(org_JMMI$governorate_ID %in% Contested$Contested,"Contested", NA)))
# Add governorate names back
#dt_gov$gov_name <- org_JMMI$governorate_name[match(dt_gov$governorate_ID, org_JMMI$governorate_ID)]
# Filter by geographic areas
dt_gov_north <- org_JMMI %>% filter(governorate_ID %in% North$North)
dt_gov_south <- org_JMMI %>% filter(governorate_ID %in% South$South)
dt_gov_cnt <- org_JMMI %>% filter(governorate_ID %in% Contested$Contested)
list_org <- org_JMMI %>% group_by(Date) %>% group_map(~unique(.x$org))
list_org2 <- data.frame(matrix(unlist(list_org), nrow=length(list_org), byrow = T))
View(list_org2)
View(list_org)
test <- do.call(rbind, lapply(list_org), `lenght<-`, max(lenghts(list_org)))
test <- do.call(rbind, lapply(list_org), `length<-`, max(lengths(list_org)))
test <- do.call(rbind, lapply(list_org), `length<-`, max(lengths(list_org)))
test <- do.call(rbind, lapply(list_org, `length<-`, max(lengths(list_org)))
test <- do.call(rbind, lapply(list_org, `length<-`, max(lengths(list_org))))
test <- do.call(rbind, lapply(list_org, `length<-`, max(lengths(list_org))))
View(test)
## JMMI Partners Tracker
## Yemen Data Team - 08-03-2020
## V1
rm(list=ls())
library(stringr)
library(zoo)
library(openxlsx)
library(data.table)
library(dplyr)
library(magrittr)
library(tidyverse)
library(formattable)
library(reshape2)
##############
# Cleaning and Wrangling
##############
# For the server
setwd("./Raw Data/")
# Get a list of all files in that folder
list_all<-(list.files())
# Build a list to populate with the csv
list_pull<-list()
# Build a data tibble to populate with a select of the variables
org_JMMI<-as_tibble(data.frame(test="TEST"))
# Put all the csvs into one file together and work from there
# https://stackoverflow.com/questions/5758084/loop-in-r-to-read-many-files
for (k in 1:length(list_all)){
list_pull[[k]] <- read.csv(list_all[k])
# Make the JMMI label in the datasets for disaggregation later
name <-gsub(".csv","",unlist(strsplit(list_all[[k]]," "))[2])
list_pull[[k]]<-mutate(as_tibble(list_pull[[k]]), JMMI= name)
# Change from the _Alls to the nones from before, it should hold in the future.
# Occured during the tool combine
ifelse("select_one_organization_name_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], select_one_organisation_name = select_one_organization_name_All),
NA)
ifelse("governorate_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], governorate_ID = governorate_ID_All),
NA)
ifelse("district_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], district_ID = district_ID_All),
NA)
}
# Function to pull out names of orgs and districts and jmmi
column_pull_org<-function(data){
colnames(data)<-gsub("_ALL", "", colnames(data))
df<-data%>%
dplyr::select("JMMI", ends_with("_ID", ignore.case = F),starts_with("select_one_"))
org_JMMI<<-as_tibble(merge(df,org_JMMI,all=T))
}
# Use lapply to run the function we just made over our cleaned data in the list
lapply(list_pull, column_pull_org)
# Add the Pcodes
# Substitute out the pcodes to standardize the name (taken from JMMI scripting, with csv (utf-8) sheet)
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
source("./other scripts/add_pcodes.R")
org_JMMI<-add.pcodes(org_JMMI)
# Order and delete columns
org_JMMI<-org_JMMI[,c("JMMI","district_ID","governorate_ID","select_one_organisation_name","district_name","governorate_name")]
org_JMMI<-dplyr::rename((org_JMMI), org = select_one_organisation_name)
# Make the JMMI a date that we can sort and work with later
org_JMMI$JMMI<-gsub("_"," ",org_JMMI$JMMI)
org_JMMI$Date<-(as.Date(as.yearmon(org_JMMI$JMMI), format="%b-%Y"))
#org_JMMI$Date<-as.Date(org_JMMI$JMMI, format)
# Ad variables for aggregation
org_JMMI$org_num <- 1
###############
#Analysis
###############
#https://stackoverflow.com/questions/50953598/r-group-by-count-distinct-values-grouping-by-another-column
#What are the splits North and South indicate here
North<-c("YE14", #Al Bayda
"YE27", #Al Mahwit
"YE29", #Amran
"YE20", #Dhamar
"YE17", #Hajjah
"YE11", #Ibb
"YE31", #Raymah
"YE22", #Sa'ada
"YE23", #Sana'a
"YE13"  #Sana'a City
)
North <- data.frame(North = North)
South<-c("YE12", #Abyan
"YE24", #Aden
"YE28", #Al Maharah
"YE19", #Hadramaut
"YE25", #Lahj
"YE21", #Shabwah
"YE32"  #Socotra
)
South <- data.frame(South = South)
Contested<-c("YE30", #Al Dhale'e
"YE18", #Al Hudaydah
"YE16", #Al Jawf
"YE26", #Marib
"YE15"  #Taizz
)
Contested <- data.frame(Contested = Contested)
# Basic Counts
# dt <- org_JMMI %>%
# group_by(Date, org) %>%
# dplyr::summarise(total_obs=dplyr::n(),dist_visited=dplyr::n_distinct(district_ID), gov_visisted=dplyr::n_distinct(governorate_ID))
# Aggregation by district (to then filter by geographic area)
#dt_gov <- org_JMMI %>% group_by(JMMI, governorate_ID) %>%
#  dplyr::summarise(total_obs = dplyr::n(), dist_visited = n_distinct(district_ID), num_partners = n_distinct(org))
# Add geographic ares as a column for filtering
org_JMMI$geo <- ifelse(org_JMMI$governorate_ID %in% North$North, "North",
ifelse(org_JMMI$governorate_ID %in% South$South, "South",
ifelse(org_JMMI$governorate_ID %in% Contested$Contested,"Contested", NA)))
# Add governorate names back
#dt_gov$gov_name <- org_JMMI$governorate_name[match(dt_gov$governorate_ID, org_JMMI$governorate_ID)]
# Filter by geographic areas
dt_gov_north <- org_JMMI %>% filter(governorate_ID %in% North$North)
dt_gov_south <- org_JMMI %>% filter(governorate_ID %in% South$South)
dt_gov_cnt <- org_JMMI %>% filter(governorate_ID %in% Contested$Contested)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% unique() %>% dcast(Date~org)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "ngo_name") %>% unique()
View(list_org)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name","geo") %>% unique()
View(list_org)
?dcast.data.table
test <- dcast(list_org, org~geo+Date)
View(test)
test <- dcast(list_org, Date)
list_org <- org_JMMI %>% select("Date", "org", "ngo_name","geo") %>% unique()
list_org <- org_JMMI %>% select("Date", "org","geo") %>% unique()
test <- dcast(list_org, Date~geo+org)
rm(list_org)
test <- dcast(list_org, Date~geo+org)
list_org <- org_JMMI %>% select("Date", "org","geo") %>% unique()
test <- dcast(list_org, Date~geo+org)
View(test)
test <- dcast(list_org, Date~org)
View(test)
test <- dcast(list_org, Date~org, value.var = "org")
View(test)
test <- dcast(list_org, Date~geo+org, value.var = "org")
View(test)
test <- dcast(list_org, Date~org+geo, value.var = "org")
View(test)
test <- dcast(list_org, Date~org, value.var = "org")
View(test)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org","geo") %>% unique()
test <- dcast(list_org, Date~org, value.var = "ngo_name")
View(test)
test <- dcast(list_org, org+ngo_name~Date, value.var = "ngo_name")
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org","ngo_name") %>% unique()
test <- dcast(list_org, org+ngo_name~Date, value.var = "ngo_name")
View(test)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "geo", "ngo_name") %>% unique()
test <- dcast(list_org, org+geo~Date, value.var = "ngo_name")
View(test)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "geo", "ngo_name") %>% unique()
test <- dcast(list_org, Date+geo~org, value.var = "ngo_name")
View(test)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "geo", "ngo_name") %>% unique()
test <- dcast(list_org, Date+geo~ngo_name, value.var = "org")
View(test)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "geo") %>% unique()
test <- dcast(list_org, Date+geo~org, value.var = "org")
View(test)
test <- dcast(list_org, Date+geo~org)
list_org <- org_JMMI %>% select("Date", "org", "geo") %>% unique()
test <- dcast(list_org, Date+geo~org)
View(test)
list_org <- org_JMMI %>% group_by(Date) %>% group_map(~unique(.x$org))
test <- purrr::map_dfr(list_org, as.list )
test <- reduce(rbind, list_org)
test <- as.data.frame(do.call(rbind, list_org))
View(test)
test <- bind_rows(lapply(list_org, as.data.frame.list))
View(test)
View(list_org)
list_org <- org_JMMI %>% group_by(Date) %>% group_map(~unique(.x$org))
test <- bind_rows(lapply(list_org, as.data.frame.list))
list_org2 <- data.frame(matrix(unlist(list_org), nrow=length(list_org), byrow = T))
do.call(rbind.data.frame, list_org)
View(list_org2)
org_JMMI$ngo_name <- "ngo_name"
list_org <- org_JMMI %>% select("Date", "org", "geo") %>% unique()
test <- dcast(list_org, Date+geo~org, value.var = "org")
View(test)
list_org_final <- list_org %>% dcast(Date+geo~org, value.var = "org") %>% mutate(count = rowSums())
rm(list=ls())
library(stringr)
library(zoo)
library(openxlsx)
library(data.table)
library(dplyr)
library(magrittr)
library(tidyverse)
library(formattable)
library(reshape2)
##############
# Cleaning and Wrangling
##############
# For the server
setwd("./Raw Data/")
# Get a list of all files in that folder
list_all<-(list.files())
# Build a list to populate with the csv
list_pull<-list()
# Build a data tibble to populate with a select of the variables
org_JMMI<-as_tibble(data.frame(test="TEST"))
# Put all the csvs into one file together and work from there
# https://stackoverflow.com/questions/5758084/loop-in-r-to-read-many-files
for (k in 1:length(list_all)){
list_pull[[k]] <- read.csv(list_all[k])
# Make the JMMI label in the datasets for disaggregation later
name <-gsub(".csv","",unlist(strsplit(list_all[[k]]," "))[2])
list_pull[[k]]<-mutate(as_tibble(list_pull[[k]]), JMMI= name)
# Change from the _Alls to the nones from before, it should hold in the future.
# Occured during the tool combine
ifelse("select_one_organization_name_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], select_one_organisation_name = select_one_organization_name_All),
NA)
ifelse("governorate_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], governorate_ID = governorate_ID_All),
NA)
ifelse("district_ID_All" %in% colnames(list_pull[[k]]),
list_pull[[k]]<-dplyr::rename(list_pull[[k]], district_ID = district_ID_All),
NA)
}
# Function to pull out names of orgs and districts and jmmi
column_pull_org<-function(data){
colnames(data)<-gsub("_ALL", "", colnames(data))
df<-data%>%
dplyr::select("JMMI", ends_with("_ID", ignore.case = F),starts_with("select_one_"))
org_JMMI<<-as_tibble(merge(df,org_JMMI,all=T))
}
# Use lapply to run the function we just made over our cleaned data in the list
lapply(list_pull, column_pull_org)
# Add the Pcodes
# Substitute out the pcodes to standardize the name (taken from JMMI scripting, with csv (utf-8) sheet)
this_script_path<-(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(this_script_path)
source("./other scripts/add_pcodes.R")
org_JMMI<-add.pcodes(org_JMMI)
# Order and delete columns
org_JMMI<-org_JMMI[,c("JMMI","district_ID","governorate_ID","select_one_organisation_name","district_name","governorate_name")]
org_JMMI<-dplyr::rename((org_JMMI), org = select_one_organisation_name)
# Make the JMMI a date that we can sort and work with later
org_JMMI$JMMI<-gsub("_"," ",org_JMMI$JMMI)
org_JMMI$Date<-(as.Date(as.yearmon(org_JMMI$JMMI), format="%b-%Y"))
#org_JMMI$Date<-as.Date(org_JMMI$JMMI, format)
# Ad variables for aggregation
org_JMMI$org_num <- 1
###############
#Analysis
###############
#https://stackoverflow.com/questions/50953598/r-group-by-count-distinct-values-grouping-by-another-column
#What are the splits North and South indicate here
North<-c("YE14", #Al Bayda
"YE27", #Al Mahwit
"YE29", #Amran
"YE20", #Dhamar
"YE17", #Hajjah
"YE11", #Ibb
"YE31", #Raymah
"YE22", #Sa'ada
"YE23", #Sana'a
"YE13"  #Sana'a City
)
North <- data.frame(North = North)
South<-c("YE12", #Abyan
"YE24", #Aden
"YE28", #Al Maharah
"YE19", #Hadramaut
"YE25", #Lahj
"YE21", #Shabwah
"YE32"  #Socotra
)
South <- data.frame(South = South)
Contested<-c("YE30", #Al Dhale'e
"YE18", #Al Hudaydah
"YE16", #Al Jawf
"YE26", #Marib
"YE15"  #Taizz
)
Contested <- data.frame(Contested = Contested)
# Basic Counts
# dt <- org_JMMI %>%
# group_by(Date, org) %>%
# dplyr::summarise(total_obs=dplyr::n(),dist_visited=dplyr::n_distinct(district_ID), gov_visisted=dplyr::n_distinct(governorate_ID))
# Aggregation by district (to then filter by geographic area)
#dt_gov <- org_JMMI %>% group_by(JMMI, governorate_ID) %>%
#  dplyr::summarise(total_obs = dplyr::n(), dist_visited = n_distinct(district_ID), num_partners = n_distinct(org))
# Add geographic ares as a column for filtering
org_JMMI$geo <- ifelse(org_JMMI$governorate_ID %in% North$North, "North",
ifelse(org_JMMI$governorate_ID %in% South$South, "South",
ifelse(org_JMMI$governorate_ID %in% Contested$Contested,"Contested", NA)))
# Add governorate names back
#dt_gov$gov_name <- org_JMMI$governorate_name[match(dt_gov$governorate_ID, org_JMMI$governorate_ID)]
# Filter by geographic areas
dt_gov_north <- org_JMMI %>% filter(governorate_ID %in% North$North)
dt_gov_south <- org_JMMI %>% filter(governorate_ID %in% South$South)
dt_gov_cnt <- org_JMMI %>% filter(governorate_ID %in% Contested$Contested)
######
list_org <- org_JMMI %>% group_by(Date) %>% group_map(~unique(.x$org))
View(list_org)
### Load empty dataset
ong_df <- openXL("./empty_dataset.xlsx")
### Load empty dataset
ong_df <- read.xlsx("./empty_dataset.xlsx")
View(ong_df)
View(list_org)
?group_map
source('C:/Users/REACH_AO_YEMEN/Desktop/OFDA_Tracker/Base Tracker Code.R')
